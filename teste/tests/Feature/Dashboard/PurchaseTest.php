<?php

namespace Tests\Feature\Dashboard;

use App\Models\Client;
use App\Models\Discount;
use App\Models\Product;
use App\Models\Purchase;
use App\Models\Status;
use App\Models\User;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Tests\TestCase;

class PurchaseTest extends TestCase
{
    use DatabaseTransactions;// Para dar um "rollback" quando inserir algo no banco, de forma automática!

    protected $user;
    protected $purchase;
    protected $product;
    protected $data;
    protected $discount;
    protected $status;
    protected $client;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->user = factory(User::class)->create();
        $this->purchase = factory(Purchase::class)->create();
        $this->product = factory(Product::class)->create();
        $this->discount = factory(Discount::class)->create();
        $this->status = factory(Status::class)->create();
        $this->client = factory(Client::class)->create();
    }

    /**
     * Teste básico que simula quando o usuário visita a página de listagem de pedidos de compra.
     *
     * @return void
     */
    public function testIndex()
    {
        $this->actingAs($this->user)
            ->get(route('dashboard.purchases.index'));

        $this->assertAuthenticated();
    }

    /**
     * Teste básico que simula quando o usuário visita o formulário de cadastro/edição de pedidos de compra.
     *
     * @return void
     */
    public function testCreate()
    {
        $this->actingAs($this->user)
            ->get(route('dashboard.purchases.create'));

        $this->assertAuthenticated();
    }

    /**
     * Teste básico que simula o ato cadastrar um determinado pedido de compra pelo formulário
     * de cadastro/edição de pedido de compra.
     *
     * @return void
     */
    public function testStore()
    {
        $data = [
            'quantity' => [
                10
            ],
            'product_id' => [
                $this->product->id
            ],
            'discount_id' => $this->discount->id,
            'status_id' => $this->status->id,
            'client_id' => $this->client->id
        ];

        $this->actingAs($this->user)
            ->put(route('dashboard.purchases.store'), $data);

        $this->assertAuthenticated();
    }

    /**
     * Teste básico que simula quando o usuário visita o formulário de cadastro/edição
     * de um determinado pedido de compra.
     *
     * @return void
     */
    public function testEdit()
    {
        $this->actingAs($this->user)
            ->get(route('dashboard.purchases.edit', $this->purchase->id));

        $this->assertAuthenticated();
    }

    /**
     * Teste básico que simula o ato atualizar de um determinado pedido de compra pelo formulário
     * de cadastro/edição de pedido de compra.
     *
     * @return void
     */
    public function testUpdate()
    {
        $data = [
            'quantity' => [
                10
            ],
            'product_id' => [
                $this->product->id
            ],
            'discount_id' => $this->discount->id,
            'status_id' => $this->status->id,
            'client_id' => $this->client->id
        ];

        $this->actingAs($this->user)
            ->put(route('dashboard.purchases.update', $this->purchase->id), $data);

        $this->assertAuthenticated();
    }

    /**
     * Teste básico que simula quando o usuário visita a tela de visualização de um determinado pedido de compra.
     *
     * @return void
     */
    public function testShow()
    {
        $this->actingAs($this->user)
            ->get(route('dashboard.purchases.show', $this->purchase->id));

        $this->assertAuthenticated();
    }
}
