<?php

namespace Tests\Feature\Dashboard;

use App\Models\Client;
use App\Models\User;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Tests\TestCase;

class ClientTest extends TestCase
{
    use DatabaseTransactions;// Para dar um "rollback" quando inserir algo no banco, de forma automática!

    protected $user;
    protected $client;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->user = factory(User::class)->create();
        $this->client = factory(Client::class)->create();
    }

    /**
     * Teste básico que simula quando o usuário visita a página de listagem de clientes.
     *
     * @return void
     */
    public function testIndex()
    {
        $this->actingAs($this->user)
            ->get(route('dashboard.clients.index'));

        $this->assertAuthenticated();
    }

    /**
     * Teste básico que simula quando o usuário visita o formulário de cadastro/edição de clientes.
     *
     * @return void
     */
    public function testCreate()
    {
        $this->actingAs($this->user)
            ->get(route('dashboard.clients.create'));

        $this->assertAuthenticated();
    }

    /**
     * Teste básico que simula o ato de cadastrar um novo cliente pelo formulário de cadastro/edição de clientes.
     *
     * @return void
     */
    public function testStore()
    {
        $data = [
            'name' => 'Test Client',
            'cpf' => '122.075.777-00',
            'email' => 'teste@client.dev'
        ];

        $this->actingAs($this->user)
            ->post(route('dashboard.clients.store'), $data);

        $this->assertAuthenticated();
    }

    /**
     * Teste básico que simula quando o usuário visita o formulário de cadastro/edição de um determinado cliente.
     *
     * @return void
     */
    public function testEdit()
    {
        $this->actingAs($this->user)
            ->get(route('dashboard.clients.edit', $this->client->id));

        $this->assertAuthenticated();
    }

    /**
     * Teste básico que simula o ato de atualizar um determinado cliente pelo formulário de cadastro/edição de clientes.
     *
     * @return void
     */
    public function testUpdate()
    {
        $data = [
            'name' => 'Test Client Update',
            'cpf' => '122.075.777-00',
            'email' => 'teste@client.dev'
        ];

        $this->actingAs($this->user)
            ->put(route('dashboard.clients.update', $this->client->id), $data);

        $this->assertAuthenticated();
    }

    /**
     * Teste básico que simula quando o usuário visita a tela de visualização de um determinado cliente.
     *
     * @return void
     */
    public function testShow()
    {
        $this->actingAs($this->user)
            ->get(route('dashboard.clients.show', $this->client->id));

        $this->assertAuthenticated();
    }
}
