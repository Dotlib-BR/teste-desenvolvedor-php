<?php

namespace Tests\Feature\Zeus;

use App\Models\Client;
use App\Models\User;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Tests\TestCase;

class ClientTest extends TestCase
{
    use DatabaseTransactions;//para dar um "rollback" quando inserir algo no banco, de forma automática!

    protected $user;
    protected $client;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->user = factory(User::class)->create();
        $this->client = factory(Client::class)->create();
    }

    /**
     * Um teste básico para saber se a API está listando os clientes
     *
     * @return void
     */
    public function testIndex()
    {
        $response = $this->get('/zeus/clients',
            ['Authorization' => 'Zeus '.$this->user->api_token]//passo 'Zeus' para ter mais controle das requisições e organização.
        )->assertStatus(200);

        $response->assertJsonStructure([// Testando estrutura de paginação.
            'first_page_url',
            'data' => [
                '*' => [
                    'id', 'name','cpf', 'email'
                ]
            ],
            'per_page'
        ]);
    }

    /**
     * Um teste básico para saber se a API está gravando os dados de um cliente
     *
     * @return void
     */
    public function testStore()
    {
        $data = [
            'name' => 'My name',
            'cpf' => '123.456.789-00',
            'email' => 'myfakeemail@fake.com'
        ];

        $response = $this->post(
            route('clients.store'),
            $data,
            ['Authorization' => 'Zeus '.$this->user->api_token]
        )->assertStatus(201);

        $response->assertJsonStructure([//se vier um json com essa estrutura eu sei que deu tudo certo.
            'name', 'cpf', 'email'
        ]);

        $this->assertDatabaseHas('clients', [
            'email' => $data['email']
        ]);
    }

    /**
     * Um teste básico para saber se a API está mostrando um determinado cliente
     *
     * @return void
     */
    public function testShow()
    {
        $response = $this->get(
            route('clients.show', $this->client->id),
            ['Authorization' => 'Zeus '.$this->user->api_token]
        )->assertStatus(200);

        $return = (array) json_decode($response->getContent());

        $this->assertArrayHasKey('id', $return);
        $this->assertArrayHasKey('name', $return);
        $this->assertArrayHasKey('cpf', $return);
        $this->assertArrayHasKey('email', $return);
    }

    /**
     * Um teste básico para saber se a API está atualizando dados de um determinado cliente
     *
     * @return void
     */
    public function testUpdate()
    {
        $data = [
            'name' => 'My name',
            'cpf' => '123.456.789-00',
            'email' => 'myfakeemail@fake.com'
        ];

        $response = $this->put(
            route('clients.update', $this->client->id),
            $data,
            ['Authorization' => 'Zeus '.$this->user->api_token]
        )->assertStatus(200);

        $response->assertJsonStructure([
            'name', 'cpf', 'email'
        ]);
    }

    /**
     * Um teste básico para saber se a API está excluindo com softedelete um determinado cliente
     *
     * @return void
     */
    public function testDestroy()
    {
        $this->get(
            route('clients.destroy', $this->client->id),
            ['Authorization' => 'Zeus '.$this->user->api_token]
        )->assertStatus(200);//não posso ir além por causa dos observers.
    }
}
