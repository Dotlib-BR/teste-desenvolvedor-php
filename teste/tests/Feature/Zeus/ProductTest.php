<?php

namespace Tests\Feature\Zeus;

use App\Models\Product;
use App\Models\User;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class ProductTest extends TestCase
{
    use DatabaseTransactions;

    protected $user;
    protected $product;
    protected $data = [
        'name' => 'Product name',
        'barcode' => 'BARCODETESTE',
        'price' => '100,00'
    ];

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->user = factory(User::class)->create();
        $this->product = factory(Product::class)->create();
    }

    /**
     * Um teste básico para saber se a API está listando os productes
     *
     * @return void
     */
    public function testIndex()
    {
        $response = $this->get('/zeus/products',
            ['Authorization' => 'Zeus '.$this->user->api_token]//passo 'Zeus' para ter mais controle das requisições e organização.
        )->assertStatus(200);

        $response->assertJsonStructure([// Testando estrutura de paginação.
            'first_page_url',
            'data' => [
                '*' => [
                    'id', 'name','barcode', 'price'
                ]
            ],
            'per_page'
        ]);
    }

    /**
     * Um teste básico para saber se a API está gravando os dados de um produto
     *
     * @return void
     */
    public function testStore()
    {
        $response = $this->post(
            route('products.store'),
            $this->data,
            ['Authorization' => 'Zeus '.$this->user->api_token]
        );

        $response->assertJsonStructure([//se vier um json com essa estrutura eu sei que deu tudo certo.
            'name', 'barcode', 'price'
        ]);

        $this->assertDatabaseHas('products', [
            'barcode' => $this->data['barcode']
        ]);
    }

    /**
     * Um teste básico para saber se a API está mostrando um determinado produto
     *
     * @return void
     */
    public function testShow()
    {
        $response = $this->get(
            route('products.show', $this->product->id),
            ['Authorization' => 'Zeus '.$this->user->api_token]
        )->assertStatus(200);

        $return = (array) json_decode($response->getContent());

        // Se vier essa estrutura eu sei que deu certo.
        $this->assertArrayHasKey('id', $return);
        $this->assertArrayHasKey('name', $return);
        $this->assertArrayHasKey('barcode', $return);
        $this->assertArrayHasKey('price', $return);
    }

    /**
     * Um teste básico para saber se a API está atualizando dados de um determinado produto
     *
     * @return void
     */
    public function testUpdate()
    {
        $response = $this->put(
            route('products.update', $this->product->id),
            $this->data,
            ['Authorization' => 'Zeus '.$this->user->api_token]
        )->assertStatus(200);

        $response->assertJsonStructure([
            'name', 'barcode', 'price'
        ]);
    }

    /**
     * Um teste básico para saber se a API está excluindo com softedelete um determinado produto
     *
     * @return void
     */
    public function testDestroy()
    {
        $this->get(
            route('products.destroy', $this->product->id),
            ['Authorization' => 'Zeus '.$this->user->api_token]
        )->assertStatus(200);
    }
}
