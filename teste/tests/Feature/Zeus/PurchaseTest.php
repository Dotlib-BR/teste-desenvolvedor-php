<?php

namespace Tests\Feature\Zeus;

use App\Models\Client;
use App\Models\Discount;
use App\Models\Product;
use App\Models\Purchase;
use App\Models\Status;
use App\Models\User;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class PurchaseTest extends TestCase
{
    use DatabaseTransactions;//para dar um "rollback" quando inserir algo no banco, de forma automática!

    protected $user;
    protected $purchase;
    protected $product;
    protected $data;
    protected $discount;
    protected $status;
    protected $client;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->user = factory(User::class)->create();
        $this->purchase = factory(Purchase::class)->create();
        $this->product = factory(Product::class)->create();
        $this->discount = factory(Discount::class)->create();
        $this->status = factory(Status::class)->create();
        $this->client = factory(Client::class)->create();

    }

    /**
     * Um teste básico para saber se a API está listando os pedidos de compra
     *
     * @return void
     */
    public function testIndex()
    {
        $response = $this->get('/zeus/purchases',
            ['Authorization' => 'Zeus '.$this->user->api_token]//passo 'Zeus' para ter mais controle das requisições e organização.
        )->assertStatus(200);

        $response->assertJsonStructure([// Testando estrutura de paginação.
            'first_page_url',
            'data' => [
                '*' => [
                    'id', 'invoice_number','quantity', 'product',
                    'client', 'status'
                ]
            ],
            'per_page'
        ]);
    }

    /**
     * Um teste básico para saber se a API está gravando os dados de um pedido de compra
     *
     * @return void
     */
    public function testStore()
    {
        $this->data = [
            'quantity' => [
                10
            ],
            'product_id' => [
                $this->product->id
            ],
            'discount_id' => $this->discount->id,
            'status_id' => $this->status->id,
            'client_id' => $this->client->id
        ];

        $response = $this->post(
            route('purchases.store'),
            $this->data,
            ['Authorization' => 'Zeus '.$this->user->api_token]
        );

        $response->assertJsonStructure([//se vier um json com essa estrutura eu sei que deu tudo certo.
            'quantity', 'product_id', 'discount_id',
            'status_id', 'client_id'
        ]);
    }

    /**
     * Um teste básico para saber se a API está mostrando um determinado pedido de compra
     *
     * @return void
     */
    public function testShow()
    {
        $response = $this->get(
            route('purchases.show', $this->purchase->id),
            ['Authorization' => 'Zeus '.$this->user->api_token]
        )->assertStatus(200);

        $return = (array) json_decode($response->getContent());

        $this->assertArrayHasKey('client_id', $return);// Se vier essa estrutura eu sei que deu certo.
        $this->assertArrayHasKey('discount_id', $return);
        $this->assertArrayHasKey('invoice_number', $return);
        $this->assertArrayHasKey('total', $return);
    }

    /**
     * Um teste básico para saber se a API está atualizando dados de um determinado pedido de compra
     *
     * @return void
     */
    public function testUpdate()
    {
        $this->data = [
            'quantity' => [
                10
            ],
            'product_id' => [
                $this->product->id
            ],
            'discount_id' => $this->discount->id,
            'status_id' => $this->status->id,
            'client_id' => $this->client->id
        ];

        $response = $this->put(
            route('purchases.update', $this->purchase->id),
            $this->data,
            ['Authorization' => 'Zeus '.$this->user->api_token]
        )->assertStatus(200);

        $response->assertJsonStructure([//se vier um json com essa estrutura eu sei que deu tudo certo.
            'quantity', 'product_id', 'discount_id',
            'status_id', 'client_id'
        ]);
    }

    /**
     * Um teste básico para saber se a API está excluindo com forceDelete um determinado pedido de compra
     *
     * @return void
     */
    public function testDestroy()
    {
        $this->get(
            route('purchases.destroy', $this->purchase->id),
            ['Authorization' => 'Zeus '.$this->user->api_token]
        )->assertStatus(200);
    }
}
